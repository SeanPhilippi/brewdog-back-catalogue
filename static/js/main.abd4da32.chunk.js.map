{"version":3,"sources":["components/Beer.js","components/Home.js","components/MyList.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["styles","height","width","backgroundSize","backgroundRepeat","backgroundPosition","display","justifyContent","alignItems","Beer","_ref","beer","_ref$beer","name","tagline","first_brewed","ph","description","brewers_tips","image_url","toggleLiked","liked","react_default","a","createElement","className","style","Object","objectSpread","backgroundImage","concat","onClick","Home","beers","likedBeers","map","beerId","id","key","find","_ref2","MyList","Nav","react_router_dom","to","App","state","_this","console","log","setState","filter","_ref3","_ref4","toConsumableArray","home","_this$state","pageNotFound","myList","_this2","this","fetch","then","data","json","length","react_router","exact","path","component","render","Component","Boolean","window","location","hostname","match","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.abd4da32.chunk.js","sourcesContent":["import React from 'react';\n\nconst styles = {\n  height: '550px',\n  width: '120px',\n  backgroundSize: 'contain',\n  backgroundRepeat: 'no-repeat',\n  backgroundPosition: 'center',\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n};\n\nexport default ({\n  beer,\n  beer: {\n    name,\n    tagline,\n    first_brewed,\n    ph,\n    description,\n    brewers_tips,\n    image_url,\n  },\n  toggleLiked,\n  liked,\n}) => (\n  <div className=\"beer\">\n    <div className=\"beer-info\">\n      <div className=\"name\">{ name }</div>\n      <div className=\"tagline\">{ tagline }</div>\n      <div className=\"date\">First brewed: { first_brewed }</div>\n      <div className=\"ph\">ph: { ph }</div>\n      <div className=\"desc\">Description: { description }</div>\n      <div className=\"tips\">Brewers tips: { brewers_tips }</div>\n    </div>\n    <div\n      className=\"image\"\n      style={{\n        ...styles,\n        backgroundImage: `url(${image_url})`,\n      }}\n    />\n    <button\n      className=\"like-btn\"\n      onClick={() => toggleLiked(beer)}\n    >\n      { liked ? 'Liked' : 'Like' }\n    </button>\n  </div>\n);\n","import React from 'react';\nimport Beer from './Beer';\n\nexport default ({\n  beers,\n  toggleLiked,\n  likedBeers,\n}) => {\n  const getLiked = beerId => likedBeers.find(({ id }) => id === beerId);\n\n  const renderBeers = () => beers.map(beer => {\n    const { id  } = beer;\n\n    return (\n      <Beer\n        key={id}\n        beer={beer}\n        toggleLiked={toggleLiked}\n        liked={getLiked(id)}\n      />\n    );\n  });\n\n  return (\n    <div className=\"Home\">\n      <div className=\"site-title\">\n        BrewDog Back Catalogue\n      </div>\n      <div className=\"subheading\">\n        Explore here\n      </div>\n      <div className=\"beers-container\">\n        { renderBeers() }\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport Beer from './Beer';\n\nexport default ({\n  likedBeers,\n  toggleLiked,\n}) => {\n  const renderLikedBeers = () => likedBeers.map(beer => (\n    <Beer\n      key={beer.id}\n      beer={beer}\n      toggleLiked={toggleLiked}\n      liked\n    />\n  ));\n\n  return (\n    <div className=\"mylist-container\">\n      <h1 className=\"header\">\n        My Liked Beers\n      </h1>\n      <ul className=\"list\">\n        { renderLikedBeers() }\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default () => (\n  <div className=\"nav\">\n    <Link\n      className=\"link\"\n      to=\"/\"\n    >\n      Home\n    </Link>\n    <Link\n      className=\"link\"\n      to=\"/mylist\"\n    >\n      My List\n    </Link>\n  </div>\n);\n","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './components/Home';\nimport MyList from './components/MyList';\nimport Nav from './components/Nav';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from 'react-router-dom';\n\nexport default class App extends Component {\n  state = {\n    beers: [],\n    likedBeers: [],\n  };\n\n  componentDidMount() {\n    fetch('https://api.punkapi.com/v2/beers')\n      .then(data => data.json())\n      .then(beers => {\n        console.log('beers', beers);\n        this.setState({ beers });\n      })\n  }\n\n  toggleLiked = (beer) => {\n    const { id: beerId } = beer;\n    const { likedBeers } = this.state;\n\n    if (likedBeers.find(({id}) => id === beerId)) {\n      console.log('found, deleting');\n      this.setState(({ likedBeers }) => ({\n        likedBeers: likedBeers.filter(({ id }) => id !== beerId),\n      }));\n    } else {\n      console.log('adding...');\n      this.setState(({ likedBeers }) => ({\n        likedBeers: [...likedBeers, beer],\n      }));\n    }\n  };\n\n  home = () => {\n    const { beers, likedBeers } = this.state;\n\n    return (\n      <Home\n        toggleLiked={this.toggleLiked}\n        beers={beers}\n        likedBeers={likedBeers}\n      />\n    );\n  };\n\n  pageNotFound = () => (\n    <h1>\n      Page not found\n    </h1>\n  );\n\n  myList = () => (\n    <MyList\n      toggleLiked={this.toggleLiked}\n      likedBeers={this.state.likedBeers}\n    />\n  );\n\n  render() {\n    console.log('likedBeers count: ', this.state.likedBeers.length);\n\n    return (\n      <Router>\n        <div>\n          <Nav />\n          <Switch>\n            <Route exact path=\"/\" component={this.home} />\n            <Route exact path=\"/mylist\" component={this.myList} />\n            <Route render={this.pageNotFound()} />\n          </Switch>\n        </div>\n      </Router>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}